/*
	Github: https://github.com/FerroAndres/breve
	- Import mixins:
	@import "breve";

	- Use of mixins:
	1. border-radius:
		Identical borders:	@include border-radius(5px);
		Different borders:	@include border-radius(5px, 10px, 15px, 20px);
	2. box-shadow:
		Simply shadows:		@include box-shadow(3px 3px 1px 0 black);
		Double shadow;		@include box-shadow(3px 3px 1px 0 rgba(black, .5), inset 3px 3px 1px black);
	3. text-shadow:
		Simply shadows:		@include text-shadow(1px, 1px, 0, black, .6);
		Double shadow;		@include text-shadow(1px, 1px, 0, black, .6, 2px 2px 0 gray);
	4. box-sizing:
		Usage:				@include box-sizing(content-box);
	5. transition:
		Usage:				@include transition(color, 1s, linear);
	6. transform:
		Usage:				@include transform(scale(1.3) rotate(10deg) translateX(10px) translateY(15px) skewX(5deg) skewY(3deg));
	7. font-face:
		Usage:				@include font-face(myfont, "../fonts/myfont");
	8. gradient:
		Options: 			horizontal | vertical | diagonalTopLeft | diagonalBottomLeft | radial
		Usage:				@include gradient(radial, black, blue);
*/

$prefixes:-webkit- -moz- -ms- -o- null;

@mixin border-radius($border1, $border2: false, $border3: 0, $border4: 0) {
	$kits:-webkit- null;
	@if $border2 {
		-moz-border-radius-topleft:$border1;
		-moz-border-radius-topright:$border2;
		-moz-border-radius-bottomright:$border3;
		-moz-border-radius-bottomleft:$border4;
		@each $kit in $kits {
			#{$kit}border-top-left-radius:$border1;
			#{$kit}border-top-right-radius:$border2;
			#{$kit}border-bottom-right-radius:$border3;
			#{$kit}border-bottom-left-radius:$border4;
		}
	} @else {
		@each $prefijo in $prefixes {
			#{$prefijo}border-radius:$border1;
		}
	}
}

@mixin box-shadow($values...) {
	@each $prefijo in $prefixes {
		#{$prefijo}box-shadow:$values;
	}
}

@mixin text-shadow($x, $y, $blur, $color, $opacity: 1, $extra: null) {
	@each $prefijo in $prefixes {
		#{$prefijo}text-shadow:$x $y $blur rgba($color, $opacity), $extra;
	}
	filter:dropshadow(color=$color, offx=$x, offy=$y);
}

@mixin box-sizing($valor: border-box) {
	@each $prefijo in $prefixes {
		#{$prefijo}box-sizing:$valor;
	}
}

@mixin transition($property: all, $duration: 500ms, $function: ease-in-out) {
	@each $prefijo in $prefixes {
		#{$prefijo}transition:$property $duration $function;
	}
}

@mixin transform($values) {
	@each $prefijo in $prefixes {
		#{$prefijo}transform:$values;
	}
}

@mixin font-face($font-name, $font-url) {
	font-family:"#{$font-name}";
	src:url("#{$font-url}.otf"), url("#{$font-url}.eot?") format("eot"), url("#{$font-url}.woff") format("woff"), url("#{$font-url}.ttf") format("truetype");
}

@mixin gradient($type: vertical, $startColor: #000, $endColor: #fff) {
	background-color:$startColor;
	@if $type == horizontal {
		background:-webkit-gradient(linear, left top, right top, color-stop(0%, rgba($startColor, 1)), color-stop(100%, rgba($endColor, 1)));
		@each $prefijo in $prefixes {
			background:#{$prefijo}linear-gradient(left, rgba($startColor, 1) 0%, rgba($endColor, 1) 100%);
		}
		background: linear-gradient(to right, rgba($startColor, 1) 0%, rgba($endColor, 1) 100%);
		filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$startColor}', endColorstr='#{$endColor}', GradientType=1);
	} @else if $type == vertical {
		background:-webkit-gradient(linear, left top, left bottom, color-stop(0%, rgba($startColor, 1)), color-stop(100%, rgba($endColor, 1)));
		@each $prefijo in $prefixes {
			background:#{$prefijo}linear-gradient(top, rgba($startColor, 1) 0%, rgba($endColor, 1) 100%);
		}
		background: linear-gradient(to bottom, rgba($startColor, 1) 0%, rgba($endColor, 1) 100%);
		filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$startColor}', endColorstr='#{$endColor}', GradientType=0);
	} @else if $type == diagonalTopLeft {
		background:-webkit-gradient(linear, left top, right bottom, color-stop(0%, rgba($startColor, 1)), color-stop(100%, rgba($endColor, 1)));
		@each $prefijo in $prefixes {
			background:#{$prefijo}linear-gradient(-45deg, rgba($startColor, 1) 0%, rgba($endColor, 1) 100%);
		}
		background: linear-gradient(135deg, rgba($startColor, 1) 0%, rgba($endColor, 1) 100%);
		filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$startColor}', endColorstr='#{$endColor}', GradientType=1);
	} @else if $type == diagonalBottomLeft {
		background:-webkit-gradient(linear, left bottom, right top, color-stop(0%, rgba($startColor, 1)), color-stop(100%, rgba($endColor, 1)));
		@each $prefijo in $prefixes {
			background:#{$prefijo}linear-gradient(45deg, rgba($startColor, 1) 0%, rgba($endColor, 1) 100%);
		}
		background: linear-gradient(45deg, rgba($startColor, 1) 0%, rgba($endColor, 1) 100%);
		filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$startColor}', endColorstr='#{$endColor}', GradientType=1);
	} @else { //Radial
		background:-webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%, rgba($startColor, 1)), color-stop(100%, rgba($endColor, 1)));
		@each $prefijo in $prefixes {
			background:#{$prefijo}radial-gradient(center, ellipse cover, rgba($startColor, 1) 0%, rgba($endColor, 1) 100%);
		}
		background: radial-gradient(ellipse at center, rgba($startColor, 1) 0%, rgba($endColor, 1) 100%);
		filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$startColor}', endColorstr='#{$endColor}', GradientType=1);
	}
}